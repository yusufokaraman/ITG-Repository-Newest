// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProgrammersBlog.Data.Concrete.EntityFramework.Contexts;

namespace ProgrammersBlog.Data.Migrations
{
    [DbContext(typeof(ProgrammersBlogContext))]
    [Migration("20211215032652_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CommentCount = 1,
                            Content = "Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır. 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 931, DateTimeKind.Local).AddTicks(9495),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 931, DateTimeKind.Local).AddTicks(8337),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(160),
                            Note = "Adana Yemek Kültürü Tanıtımı",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Yemek Kültürü",
                            SeoTags = "Adana, Kebap, Yemek",
                            Thumbnail = "Default.jpg",
                            Title = "Adana Yemek Kültürü",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CommentCount = 1,
                            Content = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1212),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1210),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1213),
                            Note = "Adıyaman Yemek Kültürü Tanıtımı",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adıyaman Yemek Kültürü",
                            SeoTags = "Adıyaman, Kebap, Yemek",
                            Thumbnail = "Default.jpg",
                            Title = "Adıyaman Yemek Kültürü",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CommentCount = 1,
                            Content = "Lorem Ipsum pasajlarının birçok çeşitlemesi vardır. Ancak bunların büyük bir çoğunluğu mizah katılarak veya rastgele sözcükler eklenerek değiştirilmişlerdir. Eğer bir Lorem Ipsum pasajı kullanacaksanız, metin aralarına utandırıcı sözcükler gizlenmediğinden emin olmanız gerekir. İnternet'teki tüm Lorem Ipsum üreteçleri önceden belirlenmiş metin bloklarını yineler. Bu da, bu üreteci İnternet üzerindeki gerçek Lorem Ipsum üreteci yapar. Bu üreteç, 200'den fazla Latince sözcük ve onlara ait cümle yapılarını içeren bir sözlük kullanır. Bu nedenle, üretilen Lorem Ipsum metinleri yinelemelerden, mizahtan ve karakteristik olmayan sözcüklerden uzaktır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1219),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1217),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 932, DateTimeKind.Local).AddTicks(1220),
                            Note = "Adana Tarihi Mekanlar Tanıtımı",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Tarihi Yerler",
                            SeoTags = "Adana, Kültür,Tarih,Vanda,Kebap",
                            Thumbnail = "Default.jpg",
                            Title = "Adana Tarihi Yerler",
                            UserId = 1,
                            ViewCount = 100
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4647),
                            Description = "Yemek yenilebilecek yerler ile ilgili oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4656),
                            Name = " Adana Yemek",
                            Note = "Yemek Turist Rehberi Kategorisi"
                        },
                        new
                        {
                            Id = 2,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4667),
                            Description = "Müze ve tarihsel yerler için oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4668),
                            Name = "Adana Tarihi Gezi",
                            Note = "Tarihi Gezi Turist Rehberi Kategorisi"
                        },
                        new
                        {
                            Id = 3,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4672),
                            Description = "Doğal Parklar için oluşturulmuş kategoridir.",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 934, DateTimeKind.Local).AddTicks(4673),
                            Name = "Adana Doğa Gezisi",
                            Note = "Doğal Parklar Turist Rehberi Kategorisi"
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Thumbnail")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Adana, Türkiye'nin bir ili ve en kalabalık altıncı şehridir. 2019 yılı verilerine göre 2.258.718 nüfusa sahiptir. İlin yüz ölçümü 13.844 km²dir. İlde km²ye 160 kişi düşmektedir. 01.02.2018 TÜİK verilerine göre 5'i merkez ilçe olmak üzere toplam 15 ilçesi ve belediyesi vardır. Bu ilçelerde 831 mahalle bulunmaktadır.",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4742),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4750),
                            Name = "Adana",
                            Note = "01 Plakalı il Adana.",
                            Thumbnail = "Default.jpg"
                        },
                        new
                        {
                            Id = 2,
                            Content = "Adıyaman, aynı isimli ilin merkez ilçesidir. Adıyaman merkez ilçesinin nüfusu 2020 istatistiklerine 310.644'dür. ",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4761),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4763),
                            Name = "Adıyaman",
                            Note = "02 Plakalı il Adıyaman.",
                            Thumbnail = "Default.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Content = "Afyonkarahisar veya eski ve halk arasındaki ismiyle Afyon, aynı isimli ilin merkezidir. Mermercilik ve gıda sektöründe Türkiye içinde ve dışında isim yapmıştır. Şehrin Afyon olan ismi, 2005 yılında Afyonkarahisar olarak değiştirilmiştir. ",
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4766),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 938, DateTimeKind.Local).AddTicks(4767),
                            Name = "Afyon",
                            Note = "03 Plakalı il Afyon.",
                            Thumbnail = "Default.jpg"
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("PlaceId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Callsite")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Exception")
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Logged")
                        .HasColumnType("datetime2");

                    b.Property<string>("Logger")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("MachineName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CommentCount")
                        .HasColumnType("int");

                    b.Property<string>("CreatedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedByName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("PlacePicture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SeoAuthor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SeoDescription")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SeoTags")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Adana Merkez,Adana Kebapçısı",
                            CategoryId = 1,
                            CommentCount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(617),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(343),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(627),
                            Name = "Adana Kebapçısı",
                            Note = "Adana'da yer alan kebapçı",
                            PlacePicture = "Default.jpg",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Yemek Kültürü",
                            SeoTags = "Adana, Kebap, Yemek",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 2,
                            Address = "Adıyaman Ev Yemekler, Merkez-Adıyaman",
                            CategoryId = 1,
                            CommentCount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1446),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1444),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1447),
                            Name = "Adıyaman Ev Yemekleri",
                            Note = "Adıyaman'da faaliyer gösteren ev yemekleri restoranı.",
                            PlacePicture = "Default.jpg",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adıyaman Yemek Kültürü",
                            SeoTags = "Adıyaman, Kebap, Yemek",
                            UserId = 1,
                            ViewCount = 100
                        },
                        new
                        {
                            Id = 3,
                            Address = "Adana Varda Köprüsü,Merkez Adana",
                            CategoryId = 2,
                            CommentCount = 1,
                            CreatedByName = "InitialCreate",
                            CreatedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1452),
                            Date = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1451),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedByName = "InitialCreate",
                            ModifiedDate = new DateTime(2021, 12, 15, 6, 26, 51, 942, DateTimeKind.Local).AddTicks(1453),
                            Name = "Adana Varda Köprüsü",
                            Note = "Adana'da bulunan tarihi Varda Köprüsü.",
                            PlacePicture = "Default.jpg",
                            SeoAuthor = "Yusuf Karaman",
                            SeoDescription = "Adana Tarihi Yerler",
                            SeoTags = "Adana, Kültür,Tarih,Vanda,Kebap",
                            UserId = 1,
                            ViewCount = 100
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "10a08879-a1e3-45c4-ad90-2dcee19d7f5c",
                            Name = "Category.Create",
                            NormalizedName = "CATEGORY.CREATE"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "e6d5b77d-aa31-4d6e-b5e3-127d5d8a2cab",
                            Name = "Category.Read",
                            NormalizedName = "CATEGORY.READ"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "d8d23d4e-0146-4365-b5dc-13492fdf0428",
                            Name = "Category.Update",
                            NormalizedName = "CATEGORY.UPDATE"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "c8881f37-0bb5-4b3e-8ec6-b7a4fd11ec2c",
                            Name = "Category.Delete",
                            NormalizedName = "CATEGORY.DELETE"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "8d5eb90c-7ec5-4ddb-b82b-25000b4ba4b6",
                            Name = "Article.Create",
                            NormalizedName = "ARTICLE.CREATE"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "abd08e71-139c-4336-ad46-c0d0d159fb60",
                            Name = "Article.Read",
                            NormalizedName = "ARTICLE.READ"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "32048c12-4890-4fb5-ab5d-2e1fa953a561",
                            Name = "Article.Update",
                            NormalizedName = "ARTICLE.UPDATE"
                        },
                        new
                        {
                            Id = 8,
                            ConcurrencyStamp = "99652bad-d04e-4767-9a4b-2d79eeff09bd",
                            Name = "Article.Delete",
                            NormalizedName = "ARTICLE.DELETE"
                        },
                        new
                        {
                            Id = 9,
                            ConcurrencyStamp = "8a6c5fff-bb99-48a8-ba0f-a26bc218e089",
                            Name = "User.Create",
                            NormalizedName = "USER.CREATE"
                        },
                        new
                        {
                            Id = 10,
                            ConcurrencyStamp = "52de000d-bb89-4688-bbb2-d2063ba9935d",
                            Name = "User.Read",
                            NormalizedName = "USER.READ"
                        },
                        new
                        {
                            Id = 11,
                            ConcurrencyStamp = "47184b6d-3dff-4463-98c0-7cf65d10fe58",
                            Name = "User.Update",
                            NormalizedName = "USER.UPDATE"
                        },
                        new
                        {
                            Id = 12,
                            ConcurrencyStamp = "f302d9fa-da38-41ca-8299-b6c6beab2942",
                            Name = "User.Delete",
                            NormalizedName = "USER.DELETE"
                        },
                        new
                        {
                            Id = 13,
                            ConcurrencyStamp = "7cc9c027-ef07-40cc-8092-f18b8613a473",
                            Name = "Role.Create",
                            NormalizedName = "ROLE.CREATE"
                        },
                        new
                        {
                            Id = 14,
                            ConcurrencyStamp = "f90c67dd-275a-45d7-973a-777f49a97aa3",
                            Name = "Role.Read",
                            NormalizedName = "ROLE.READ"
                        },
                        new
                        {
                            Id = 15,
                            ConcurrencyStamp = "3bcb5d10-bc63-4c64-8953-0d203743e90c",
                            Name = "Role.Update",
                            NormalizedName = "ROLE.UPDATE"
                        },
                        new
                        {
                            Id = 16,
                            ConcurrencyStamp = "7cfc0389-e9dc-46bc-b7af-3bdcf1ddd1c8",
                            Name = "Role.Delete",
                            NormalizedName = "ROLE.DELETE"
                        },
                        new
                        {
                            Id = 17,
                            ConcurrencyStamp = "13219cb4-510b-4a4b-b147-f447a2361a50",
                            Name = "Comment.Create",
                            NormalizedName = "COMMENT.CREATE"
                        },
                        new
                        {
                            Id = 18,
                            ConcurrencyStamp = "e0c77d2d-1e89-4d96-bc95-2830b82043fe",
                            Name = "Comment.Read",
                            NormalizedName = "COMMENT.READ"
                        },
                        new
                        {
                            Id = 19,
                            ConcurrencyStamp = "d52b678e-fd5a-4b10-a530-76f1cd427381",
                            Name = "Comment.Update",
                            NormalizedName = "COMMENT.UPDATE"
                        },
                        new
                        {
                            Id = 20,
                            ConcurrencyStamp = "cf6fa81a-b725-4adc-bce5-513aeb4889a7",
                            Name = "Comment.Delete",
                            NormalizedName = "COMMENT.DELETE"
                        },
                        new
                        {
                            Id = 21,
                            ConcurrencyStamp = "0a223ff6-24d1-41f8-aaf5-cbe9eecc6469",
                            Name = "AdminArea.Home.Read",
                            NormalizedName = "ADMINAREA.HOME.READ"
                        },
                        new
                        {
                            Id = 22,
                            ConcurrencyStamp = "c72d7b3a-6eb4-42a1-8114-7cbd1e0e812f",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("About")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GitHubLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LinkedInLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WebsiteLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            About = "Admin User of ProgrammersBlog",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "155bf72a-24ba-485a-84e3-cab05af4c1a8",
                            Email = "adminuser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/adminuser",
                            FirstName = "Admin",
                            GitHubLink = "https://github.com/adminuser",
                            InstagramLink = "https://instagram.com/adminuser",
                            LastName = "User",
                            LinkedInLink = "https://linkedin.com/adminuser",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINUSER@GMAIL.COM",
                            NormalizedUserName = "ADMINUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEDFyoAU83CXQWuppr0qSKzq85Q79MrdmKFv+HqHZ+SwDqoGxGw7OHEVoCNIA6Ghv+Q==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "c8553b82-5727-424e-b632-130cb983e5af",
                            TwitterLink = "https://twitter.com/adminuser",
                            TwoFactorEnabled = false,
                            UserName = "adminuser",
                            WebsiteLink = "https://programmersblog.com/",
                            YoutubeLink = "https://youtube.com/adminuser"
                        },
                        new
                        {
                            Id = 2,
                            About = "Editor User of ITG",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb291242-3866-44a3-ba3d-07cc19c9d5e5",
                            Email = "editoruser@gmail.com",
                            EmailConfirmed = true,
                            FacebookLink = "https://facebook.com/editoruser",
                            FirstName = "Admin",
                            GitHubLink = "https://github.com/editoruser",
                            InstagramLink = "https://instagram.com/editoruser",
                            LastName = "User",
                            LinkedInLink = "https://linkedin.com/editoruser",
                            LockoutEnabled = false,
                            NormalizedEmail = "EDITORUSER@GMAIL.COM",
                            NormalizedUserName = "EDITORUSER",
                            PasswordHash = "AQAAAAEAACcQAAAAEGPo2awSk2O5Kjt98HsCHGJXKvr16Z3quiR7HF7vV5HDup4rTVo6xXErXymX6MVe/w==",
                            PhoneNumber = "+905555555555",
                            PhoneNumberConfirmed = true,
                            Picture = "/userImages/defaultUser.png",
                            SecurityStamp = "cbb893a0-6488-40c0-9eae-31505dfc88d0",
                            TwitterLink = "https://twitter.com/editoruser",
                            TwoFactorEnabled = false,
                            UserName = "editoruser",
                            WebsiteLink = "https://programmersblog.com/",
                            YoutubeLink = "https://youtube.com/editoruser"
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 9
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 10
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 11
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 12
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 13
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 14
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 15
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 16
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 21
                        },
                        new
                        {
                            UserId = 1,
                            RoleId = 22
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 6
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 7
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 8
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 17
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 18
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 19
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 20
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 21
                        });
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserToken", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Article", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgrammersBlog.Entities.Concrete.Place", "Place")
                        .WithMany("Comments")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Place", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.Category", "Category")
                        .WithMany("Places")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", "User")
                        .WithMany("Places")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.RoleClaim", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserClaim", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserLogin", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserRole", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.UserToken", b =>
                {
                    b.HasOne("ProgrammersBlog.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.Place", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("ProgrammersBlog.Entities.Concrete.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Places");
                });
#pragma warning restore 612, 618
        }
    }
}
