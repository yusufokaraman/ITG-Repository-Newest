
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8' />
    <title>Kendi rotanı kendin belirle!</title>
    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />


    <script src='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.js'></script>
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.3.1/mapbox-gl.css' rel='stylesheet' />


    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.min.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v2.3.0/mapbox-gl-geocoder.css' type='text/css' />
    <script src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.0/mapbox-gl-draw.js'></script>
    <link rel='stylesheet' href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.0.0/mapbox-gl-draw.css' type='text/css' />
    <style>
        body {
            margin: 0px;
            padding: 0;
        }

        #map {
            position: absolute;
            top: 900px;
            bottom: 0;
            width: 100%;
            height: 70%
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <partial name="_MainMenuPartial" />
    <!-- Page Content -->
    <div class="container">

        <div class="row">

            <!-- Blog Entries Column -->
            @RenderBody()

            <!-- Sidebar Widgets Column -->


        </div>
        <!-- /.row -->

    </div>
    <!-- /.container -->
    <style>
        .geocoder {
            height: 100px;
            width: 150px;
            position: absolute;
            top: 800px;
            left: 10px;
            background-color: rgba(255, 255, 255, .9);
            padding: 15px;
            text-align: left;
            font-family: 'Arial';
            margin: 0;
            font-size: 13px;
        }

        #instructions {
            position: absolute;
            margin: 20px;
            width: 25%;
            height: 500px;
            top: 800px;
            bottom: 800px;
            padding: 20px;
            background-color: rgba(255,255,255,0.9);
            overflow-y: scroll;
            font-family: sans-serif;
        }
    </style>

 


    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoieXVzdWZva2FyYW1hbiIsImEiOiJja3g3OWd6aWozMnhyMnVwOG90eG85dDI2In0.qt6YqxLoGMVe2fSJDGUQjg';
        var instructions = document.getElementById('instructions');
        var map = new mapboxgl.Map({
            container: 'map', // container id
            style: 'mapbox://styles/mapbox/streets-v11', //hosted style id
            center: [-122.675246, 45.529431], // starting position
            zoom: 13, // starting zoom
            minZoom: 11 // keep it local
        });
        //  geocoder here
        var geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            // limit results to Australia
            //country: 'IN',
        });

        // After the map style has loaded on the page, add a source layer and default
        // styling for a single point.
        map.on('load', function () {
            // Listen for the `result` event from the MapboxGeocoder that is triggered when a user
            // makes a selection and add a symbol that matches the result.
            geocoder.on('result', function (ev) {
                console.log(ev.result.center);

            });
        });
        var draw = new MapboxDraw({
            displayControlsDefault: false,
            controls: {
                line_string: true,
                trash: true
            },
            styles: [
                // ACTIVE (being drawn)
                // line stroke
                {
                    "id": "gl-draw-line",
                    "type": "line",
                    "filter": ["all", ["==", "$type", "LineString"], ["!=", "mode", "static"]],
                    "layout": {
                        "line-cap": "round",
                        "line-join": "round"
                    },
                    "paint": {
                        "line-color": "#3b9ddd",
                        "line-dasharray": [0.2, 2],
                        "line-width": 4,
                        "line-opacity": 0.7
                    }
                },
                // vertex point halos
                {
                    "id": "gl-draw-polygon-and-line-vertex-halo-active",
                    "type": "circle",
                    "filter": ["all", ["==", "meta", "vertex"], ["==", "$type", "Point"], ["!=", "mode", "static"]],
                    "paint": {
                        "circle-radius": 10,
                        "circle-color": "#FFF"
                    }
                },
                // vertex points
                {
                    "id": "gl-draw-polygon-and-line-vertex-active",
                    "type": "circle",
                    "filter": ["all", ["==", "meta", "vertex"], ["==", "$type", "Point"], ["!=", "mode", "static"]],
                    "paint": {
                        "circle-radius": 6,
                        "circle-color": "#3b9ddd",
                    }
                },
            ]
        });
        // add the draw tool to the map
        map.addControl(draw);

        // add create, update, or delete actions
        map.on('draw.create', updateRoute);
        map.on('draw.update', updateRoute);
        map.on('draw.delete', removeRoute);

        // use the coordinates you just drew to make your directions request
        function updateRoute() {
            removeRoute(); // overwrite any existing layers
            var data = draw.getAll();
            var lastFeature = data.features.length - 1;
            var coords = data.features[lastFeature].geometry.coordinates;
            var newCoords = coords.join(';');
            getMatch(newCoords);
        }

        // make a directions request
        function getMatch(e) {
            var url = 'https://api.mapbox.com/directions/v5/mapbox/cycling/' + e
                + '?geometries=geojson&steps=true&access_token=' + mapboxgl.accessToken;
            var req = new XMLHttpRequest();
            req.responseType = 'json';
            req.open('GET', url, true);
            req.onload = function () {
                var jsonResponse = req.response;
                var distance = jsonResponse.routes[0].distance * 0.001;
                var duration = jsonResponse.routes[0].duration / 60;
                var steps = jsonResponse.routes[0].legs[0].steps;
                var coords = jsonResponse.routes[0].geometry;
                //  console.log(steps);
                console.log(coords);
                //  console.log(distance);
                // console.log(duration);

                // get route directions on load map
                steps.forEach(function (step) {
                    instructions.insertAdjacentHTML('beforeend', '<p>' + step.maneuver.instruction + '</p>');
                });
                // get distance and duration
                instructions.insertAdjacentHTML('beforeend', '<p>' + 'Distance: ' + distance.toFixed(2) + ' km<br>Duration: ' + duration.toFixed(2) + ' minutes' + '</p>');

                // add the route to the map
                addRoute(coords);
                //  console.log(coordinates);

            };
            req.send();
        }

        // adds the route as a layer on the map
        function addRoute(coords) {
            // check if the route is already loaded
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route')
            } else {
                map.addLayer({
                    "id": "route",
                    "type": "line",
                    "source": {
                        "type": "geojson",
                        "data": {
                            "type": "Feature",
                            "properties": {},
                            "geometry": coords
                        }
                    },
                    "layout": {
                        "line-join": "round",
                        "line-cap": "round"
                    },
                    "paint": {
                        "line-color": "#1db7dd",
                        "line-width": 8,
                        "line-opacity": 0.8
                    }
                });
            };
        }

        // remove the layer if it exists
        function removeRoute() {
            if (map.getSource('route')) {
                map.removeLayer('route');
                map.removeSource('route');
                instructions.innerHTML = '';
            } else {
                return;
            }
        }
        document.getElementById('geocoder').appendChild(geocoder.onAdd(map));

    </script>

</body>
</html>
